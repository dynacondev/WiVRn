def buildAsLibrary = project.hasProperty('buildTarget') && project.buildTarget == 'library'

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.6.1'
    }
}

allprojects {
  repositories {
      google()
      mavenCentral()
  }
}

apply plugin: buildAsLibrary ? 'com.android.library' : 'com.android.application'

task "generatePngs"() {
    group = 'Custom'

    mkdir layout.buildDirectory.dir('generated_resources')
    ["mipmap-mdpi", "mipmap-hdpi", "mipmap-xhdpi", "mipmap-xxhdpi", "mipmap-xxxhdpi", ].each {
        mkdir layout.buildDirectory.dir("generated_resources/${it}")
    }

    def css = project.hasProperty('wivrn_css') ? project.wivrn_css: "images/wivrn-local.css"

    exec {
        executable = 'rsvg-convert'
        args = [ "images/wivrn.svg", "-w", "48", "-h", "48", "-o", layout.buildDirectory.file('generated_resources/mipmap-mdpi/ic_wivrn_launcher.png').get().asFile, '--stylesheet=' + css ]
    }

    exec {
        executable = 'rsvg-convert'
        args = [ "images/wivrn.svg", "-w", "72", "-h", "72", "-o", layout.buildDirectory.file('generated_resources/mipmap-hdpi/ic_wivrn_launcher.png').get().asFile, '--stylesheet=' + css ]
    }

    exec {
        executable = 'rsvg-convert'
        args = [ "images/wivrn.svg", "-w", "96", "-h", "96", "-o", layout.buildDirectory.file('generated_resources/mipmap-xhdpi/ic_wivrn_launcher.png').get().asFile, '--stylesheet=' + css ]
    }

    exec {
        executable = 'rsvg-convert'
        args = [ "images/wivrn.svg", "-w", "144", "-h", "144", "-o", layout.buildDirectory.file('generated_resources/mipmap-xxhdpi/ic_wivrn_launcher.png').get().asFile, '--stylesheet=' + css ]
    }

    exec {
        executable = 'rsvg-convert'
        args = [ "images/wivrn.svg", "-w", "192", "-h", "192", "-o", layout.buildDirectory.file('generated_resources/mipmap-xxxhdpi/ic_wivrn_launcher.png').get().asFile, '--stylesheet=' + css ]
    }
}

android {
    namespace "org.meumeu.wivrn"
    ndkVersion "27.1.12297006"

    lint {
        disable += "ExpiredTargetSdkVersion"
    }

    defaultConfig {
        if (!buildAsLibrary) {
            applicationId "org.meumeu.wivrn"
        }
        // for Vulkan, need at least 24
        // for AImage_getHardwareBuffer, API 26
        minSdkVersion 29
        compileSdkVersion 32
        targetSdkVersion 32 // for Oculus Store

        versionName = project.hasProperty('wivrn_version') ? wivrn_version : "1.0"
        versionCode = project.hasProperty('wivrn_versionCode') ? wivrn_versionCode.toInteger() : 1
        def showImguiDemo = project.hasProperty('wivrn_show_imgui_demo') ? wivrn_show_imgui_demo : 'OFF'

        externalNativeBuild {
            def css = project.hasProperty('wivrn_css') ? project.wivrn_css: "images/wivrn-local.css"

            cmake {
                arguments '-DANDROID_TOOLCHAIN=clang',
                          '-DANDROID_STL=c++_static',
                          '-DCMAKE_ANDROID_NDK_VERSION=' + ndkVersion,
                          '-DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON',
                          '-DCMAKE_EXPORT_COMPILE_COMMANDS=ON',
                          '-DWIVRN_USE_SYSTEM_FREETYPE=OFF',
                          '-DWIVRN_BUILD_CLIENT=ON',
                          '-DWIVRN_BUILD_SERVER=OFF',
                          '-DWIVRN_BUILD_WIVRNCTL=OFF',
                          '-DWIVRN_BUILD_DASHBOARD=OFF',
                          '-DWIVRN_WERROR=ON',
                          '-DWIVRN_SHOW_IMGUI_DEMO_WINDOW=' + showImguiDemo,
                          '-DWIVRN_CSS=' + css
                
                // Conditionally add the android lib macro
                if (buildAsLibrary) {
                    arguments += '-D__ANDROID_LIB__=1'
                }

                resValue "string", "app_name", project.hasProperty('wivrn_app_name') ? project.wivrn_app_name : "WiVRn Local"
            }
        }
    }

    signingConfigs {
        if (project.hasProperty("signingKeyPassword")) {
            release {
                storeFile file("ks.keystore")
                keyAlias "default_key"
                storePassword signingKeyPassword // Set in gradle.properties
                keyPassword signingKeyPassword
                enableV2Signing true
            }
        }
    }

    buildTypes {
        if (project.hasProperty("signingKeyPassword")) {
            release {
                signingConfig signingConfigs.release
            }
        }

        release {
            manifestPlaceholders.ComOculusSupportedDevices = "all"
            if (!buildAsLibrary) {
                applicationIdSuffix = project.hasProperty('suffix') ? suffix: ".local"
            }
        }

        releaseDebuggable {
            initWith release
            debuggable true

            // Uncomment to have debug symbols
//             packagingOptions {
//                 doNotStrip "*/arm64-v8a/*.so"
//                 doNotStrip "*/armeabi-v7a/*.so"
//                 doNotStrip "*/x86/*.so"
//                 doNotStrip "*/x86_64/*.so"
//             }
        }

        oculus
        {
            initWith release
            if (!buildAsLibrary) {
                applicationIdSuffix = project.hasProperty('suffix') ? suffix: ""
            }
            manifestPlaceholders.ComOculusSupportedDevices = "quest2|quest3|questpro"
        }

        debug {
            if (!buildAsLibrary) {
                applicationIdSuffix = project.hasProperty('suffix') ? suffix: ".local"
            }
            manifestPlaceholders.ComOculusSupportedDevices = "all"
        }

        debugWithValidationLayer {
            initWith debug
            externalNativeBuild {
                cmake {
                    arguments '-DUSE_ANDROID_VALIDATION_LAYER=ON'
                }
            }
        }
    }

    flavorDimensions "device"

    productFlavors {
        standard {
            dimension "device"
            externalNativeBuild {
                cmake {
                    abiFilters 'arm64-v8a'//, 'x86_64'
                }
            }
        }
    }

    sourceSets {
        main {
            if (buildAsLibrary) {
                manifest.srcFile 'library/AndroidManifest-lib.xml'
            } else {
                manifest.srcFile 'AndroidManifest.xml'
            }
            java.srcDirs = ['client/java']
            res.srcDirs = [ 'resources', layout.buildDirectory.dir('generated_resources') ]

            assets.srcDirs 'assets'
        }
    }

    externalNativeBuild {
        cmake {
            version '3.30.3'
            path    'CMakeLists.txt'
        }
    }

    tasks["preBuild"].dependsOn "generatePngs"

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            // It probably works with merge${variant.name.capitalize()}Assets too
            tasks["generate${variant.name.capitalize()}Assets"].dependsOn "externalNativeBuild${variant.name.capitalize()}"
        }
    } else {
        applicationVariants.all { variant ->
            // It probably works with merge${variant.name.capitalize()}Assets too
            tasks["generate${variant.name.capitalize()}Assets"].dependsOn "externalNativeBuild${variant.name.capitalize()}"
        }
    }

    productFlavors.all { variant ->
        sourceSets {
            "${variant.name}" {
                assets.srcDirs layout.buildDirectory.dir("assets${variant.name.capitalize()}")
            }
        }

        externalNativeBuild{
            cmake {
                arguments '-DCMAKE_ANDROID_ASSETS_DIRECTORIES=' + layout.buildDirectory.dir("assets${variant.name.capitalize()}").get().asFile
            }
        }
    }

    if (buildAsLibrary) {
        packaging {
            jniLibs {
                exclude "lib/arm64-v8a/libopenxr_loader.so" // Avoid collision when Unity includes the same .so
            }
        }
    }
}
